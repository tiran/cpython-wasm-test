---
name: Create release

on:
  workflow_dispatch:
    inputs:
      python_tag:
        required: true
        default: "v3.11.0rc2"
        description: "Python release tag"
      emsdk_version:
        required: true
        default: "3.1.22"
        description: "Emscripten SDK version"
      wasisdk_version:
        required: true
        default: "16"
        description: "WASI SDK version"
      prerelease:
        required: true
        type: boolean
        default: true
        description: "Is this a pre-release?"
      wasmtime_version:
        required: true
        default: "latest"
        description: "wasmtime version (for testing)"
      install_wasix:
        required: true
        type: boolean
        default: false
        description: "Install WASIX for older releases?"

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Mangle Python tag
        shell: bash
        run: |
          PYTHON_TAG=${{ inputs.python_tag }}
          case "$PYTHON_TAG" in
            main) echo "PYTHON_TAG=3.12dev" >> $GITHUB_ENV;;
            3.11) echo "PYTHON_TAG=3.11dev" >> $GITHUB_ENV;;
            v*) echo "PYTHON_TAG=${PYTHON_TAG:1}" >> $GITHUB_ENV;;
            *) echo "PYTHON_TAG=$PYTHON_TAG" >> $GITHUB_ENV;;
          esac
      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: ${{ inputs.prerelease }}
          release_name: ${{ inputs.python_tag }}
          tag_name: ${{ inputs.python_tag }}
          body: |
            # Unofficial, experimental WebAssembly builds for Python ${{ env.PYTHON_TAG }}

            See [availability notes](https://docs.python.org/3.11/library/intro.html) and [WASM README.md](https://github.com/python/cpython/blob/main/Tools/wasm/README.md) for platform limitations.

            ## `Python-${{ env.PYTHON_TAG }}-wasm32-emscripten-${{ inputs.emsdk_version }}-browser.zip`

            Python in the browser.

            The files must be served from a web server. You can use the `./wasm_webserver.py` script to run a local web server and access the browser REPL from http://localhost:8000/python.html

            The `*browser-debug.zip` is a debug build with additional debug symbols and fewer optimizations.

            ## `Python-${{ env.PYTHON_TAG }}-wasm32-emscripten-${{ inputs.emsdk_version }}-node-dl.zip`

            Python on NodeJS (dynamic linking enabled).

            Run with:

            ```shell
            node python.js
            ```

            For older NodeJS you may have to use

            ```shell
            node --experimental-wasm-bigint python.js
            ```

            The `*node-dl-debug.zip` is a debug build with additional debug symbols and fewer optimizations.

            ## `Python-${{ env.PYTHON_TAG }}-wasm32-emscripten-${{ inputs.emsdk_version }}-node-pthreads.zip`

            Python on NodeJS (pthread emulation enabled).

            For older NodeJS you may have to use

            ```shell
            node --experimental-wasm-bigint --experimental-wasm-threads --experimental-wasm-bulk-memory python.js
            ```

            ## `Python-${{ env.PYTHON_TAG }}-wasm32-wasi-${{ inputs.wasisdk_version }}.zip`

            Python on WASI (WebAssembly System Interface).

            ```shell
            wasmtime run --dir . -- python.wasm
            ```

            Needs a recent version of [wasmtime](https://wasmtime.dev/).
        env:
          GITHUB_TOKEN: ${{ github.token }}

  wasi:
    name: "WASI SDK ${{ inputs.wasisdk_version }} on Python ${{ inputs.python_tag }}"
    runs-on: "ubuntu-latest"
    needs: create_release
    steps:
      - uses: actions/checkout@v2
      - name: "Clone and build 'build' Python ${{ inputs.python_tag }}"
        uses: ./.github/actions/common_setup
        id: common
        with:
          python_version: "${{ inputs.python_tag }}"
          cache_suffix: "wasi${{ inputs.wasisdk_version }}"
      - name: Install WASI SDK & wasmtime
        uses: ./.github/actions/install_wasi
        id: install
        with:
          wasisdk_version: "${{ inputs.wasisdk_version }}"
          wasmtime_version: "${{ inputs.wasmtime_version }}"
      - name: Fetch WASIX
        uses: actions/checkout@v3
        with:
          repository: singlestore-labs/wasix
          path: wasix
        if: "${{ inputs.install_wasix }}"
      - name: Build and install WASIX
        shell: bash
        run: |
          set -e
          cd wasix
          make
          sudo make install
        if: "${{ inputs.install_wasix }}"
      - name: Copy wasi-env
        shell: bash
        run: cp scripts/wasi-env $CPYTHON_DIR/Tools/wasm/
        if: "${{ inputs.install_wasix }}"
      - name: "Build ${{ inputs.python_version }}"
        uses: ./.github/actions/build_wasi
        id: build
        with:
          wasisdk_version: "${{ inputs.wasisdk_version }}"
          wasmtime_version: "${{ inputs.wasmtime_version }}"
      - name: Run pythoninfo
        shell: bash
        working-directory: "${{ env.HOST_PYTHON_DIR }}"
        run: make pythoninfo
      - name: Run tests
        shell: bash
        working-directory: "${{ env.HOST_PYTHON_DIR }}"
        run: |
          set -ex
          make buildbottest TESTOPTS="-i '*.test_srcdir' -j2"
      - name: "Package ${{ inputs.python_tag }}"
        uses: ./.github/actions/package_wasi
        id: package
        with:
          wasisdk_version: "${{ inputs.wasisdk_version }}"
      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_ZIP }}
          asset_name: ${{ env.RELEASE_NAME }}.zip
          asset_content_type: application/zip

  emsdk:
    name: "EMSDK ${{ inputs.emsdk_version }} on Python ${{ inputs.python_tag }}, ${{ matrix.flavor }}"
    runs-on: "ubuntu-latest"
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        flavor:
          - browser
          - browser-debug
          - node-dl
          - node-dl-debug
          - node-pthreads
    steps:
      - uses: actions/checkout@v2
      - name: "Clone and build 'build' Python ${{ inputs.python_tag }}"
        uses: ./.github/actions/common_setup
        id: common
        with:
          python_version: "${{ inputs.python_tag }}"
          cache_suffix: "emsdk${{ inputs.emsdk_version }}"
      - uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{ inputs.emsdk_version }}
      - name: "Build ${{ inputs.python_tag }} ${{ matrix.flavor }}"
        uses: ./.github/actions/build_emscripten
        id: build
        with:
          emsdk_version: "${{ inputs.emsdk_version }}"
          flavor: "${{ matrix.flavor }}"
      - name: Run pythoninfo
        shell: bash
        working-directory: "${{ env.HOST_PYTHON_DIR }}"
        run: make pythoninfo
        if: ${{ matrix.flavor == 'node-dl' || matrix.flavor == 'node-dl-debug' || matrix.flavor == 'node-pthreads' }}
      - name: Run tests
        shell: bash
        working-directory: "${{ env.HOST_PYTHON_DIR }}"
        run: make buildbottest TESTOPTS="-j2"
        if: ${{ matrix.flavor == 'node-dl' || matrix.flavor == 'node-pthreads' }}
      - name: "Package ${{ inputs.python_tag }} ${{ matrix.flavor }}"
        uses: ./.github/actions/package_emscripten
        id: package
        with:
          emsdk_version: "${{ inputs.emsdk_version }}"
          flavor: "${{ matrix.flavor }}"
      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_ZIP }}
          asset_name: ${{ env.RELEASE_NAME }}.zip
          asset_content_type: application/zip
